// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto3_proto {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Humour_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageArray_MsgMapEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, hilarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, height_in_cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, result_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, true_scotsman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, key_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  Message_Humour_descriptor_ = Message_descriptor_->enum_type(0);
  MessageArray_descriptor_ = file->message_type(1);
  static const int MessageArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageArray, msg_map_),
  };
  MessageArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageArray_descriptor_,
      MessageArray::default_instance_,
      MessageArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageArray, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageArray, _internal_metadata_),
      -1);
  MessageArray_MsgMapEntry_descriptor_ = MessageArray_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageArray_descriptor_, &MessageArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        MessageArray_MsgMapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::proto3_proto::Message,
            ::google::protobuf::FieldDescriptor::TYPE_STRING,
            ::google::protobuf::FieldDescriptor::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                MessageArray_MsgMapEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete MessageArray::default_instance_;
  delete MessageArray_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\014proto3_proto\"\371\001\n\007Message\022\014\n"
    "\004name\030\001 \001(\t\022.\n\010hilarity\030\002 \001(\0162\034.proto3_p"
    "roto.Message.Humour\022\024\n\014height_in_cm\030\003 \001("
    "\r\022\014\n\004data\030\004 \001(\014\022\024\n\014result_count\030\007 \001(\003\022\025\n"
    "\rtrue_scotsman\030\010 \001(\010\022\r\n\005score\030\t \001(\002\022\017\n\003k"
    "ey\030\005 \003(\004B\002\020\001\"\?\n\006Humour\022\013\n\007UNKNOWN\020\000\022\010\n\004P"
    "UNS\020\001\022\r\n\tSLAPSTICK\020\002\022\017\n\013BILL_BAILEY\020\003\"\215\001"
    "\n\014MessageArray\0227\n\007msg_map\030\001 \003(\0132&.proto3"
    "_proto.MessageArray.MsgMapEntry\032D\n\013MsgMa"
    "pEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.pro"
    "to3_proto.Message:\0028\001", 421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  MessageArray::default_instance_ = new MessageArray();
  Message::default_instance_->InitAsDefaultInstance();
  MessageArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Humour_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Humour_descriptor_;
}
bool Message_Humour_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_Humour Message::UNKNOWN;
const Message_Humour Message::PUNS;
const Message_Humour Message::SLAPSTICK;
const Message_Humour Message::BILL_BAILEY;
const Message_Humour Message::Humour_MIN;
const Message_Humour Message::Humour_MAX;
const int Message::Humour_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kNameFieldNumber;
const int Message::kHilarityFieldNumber;
const int Message::kHeightInCmFieldNumber;
const int Message::kDataFieldNumber;
const int Message::kResultCountFieldNumber;
const int Message::kTrueScotsmanFieldNumber;
const int Message::kScoreFieldNumber;
const int Message::kKeyFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hilarity_ = 0;
  height_in_cm_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_count_ = GOOGLE_LONGLONG(0);
  true_scotsman_ = false;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:proto3_proto.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(hilarity_, height_in_cm_);
    ZR_(result_count_, score_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto3_proto.Message.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hilarity;
        break;
      }

      // optional .proto3_proto.Message.Humour hilarity = 2;
      case 2: {
        if (tag == 16) {
         parse_hilarity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto3_proto::Message_Humour_IsValid(value)) {
            set_hilarity(static_cast< ::proto3_proto::Message_Humour >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height_in_cm;
        break;
      }

      // optional uint32 height_in_cm = 3;
      case 3: {
        if (tag == 24) {
         parse_height_in_cm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_in_cm_)));
          set_has_height_in_cm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // repeated uint64 key = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42, input, this->mutable_key())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_result_count;
        break;
      }

      // optional int64 result_count = 7;
      case 7: {
        if (tag == 56) {
         parse_result_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_count_)));
          set_has_result_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_true_scotsman;
        break;
      }

      // optional bool true_scotsman = 8;
      case 8: {
        if (tag == 64) {
         parse_true_scotsman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &true_scotsman_)));
          set_has_true_scotsman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_score;
        break;
      }

      // optional float score = 9;
      case 9: {
        if (tag == 77) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.Message)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto3_proto.Message.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .proto3_proto.Message.Humour hilarity = 2;
  if (has_hilarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->hilarity(), output);
  }

  // optional uint32 height_in_cm = 3;
  if (has_height_in_cm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height_in_cm(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // repeated uint64 key = 5 [packed = true];
  if (this->key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_cached_byte_size_);
  }
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->key(i), output);
  }

  // optional int64 result_count = 7;
  if (has_result_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->result_count(), output);
  }

  // optional bool true_scotsman = 8;
  if (has_true_scotsman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->true_scotsman(), output);
  }

  // optional float score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto3_proto.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.Message)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto3_proto.Message.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .proto3_proto.Message.Humour hilarity = 2;
  if (has_hilarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->hilarity(), target);
  }

  // optional uint32 height_in_cm = 3;
  if (has_height_in_cm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height_in_cm(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // repeated uint64 key = 5 [packed = true];
  if (this->key_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _key_cached_byte_size_, target);
  }
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->key(i), target);
  }

  // optional int64 result_count = 7;
  if (has_result_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->result_count(), target);
  }

  // optional bool true_scotsman = 8;
  if (has_true_scotsman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->true_scotsman(), target);
  }

  // optional float score = 9;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto3_proto.Message.Humour hilarity = 2;
    if (has_hilarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hilarity());
    }

    // optional uint32 height_in_cm = 3;
    if (has_height_in_cm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height_in_cm());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int64 result_count = 7;
    if (has_result_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->result_count());
    }

    // optional bool true_scotsman = 8;
    if (has_true_scotsman()) {
      total_size += 1 + 1;
    }

    // optional float score = 9;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  // repeated uint64 key = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->key(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_hilarity()) {
      set_hilarity(from.hilarity());
    }
    if (from.has_height_in_cm()) {
      set_height_in_cm(from.height_in_cm());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_result_count()) {
      set_result_count(from.result_count());
    }
    if (from.has_true_scotsman()) {
      set_true_scotsman(from.true_scotsman());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  name_.Swap(&other->name_);
  std::swap(hilarity_, other->hilarity_);
  std::swap(height_in_cm_, other->height_in_cm_);
  data_.Swap(&other->data_);
  std::swap(result_count_, other->result_count_);
  std::swap(true_scotsman_, other->true_scotsman_);
  std::swap(score_, other->score_);
  key_.UnsafeArenaSwap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageArray::kMsgMapFieldNumber;
#endif  // !_MSC_VER

MessageArray::MessageArray()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.MessageArray)
}

void MessageArray::InitAsDefaultInstance() {
}

MessageArray::MessageArray(const MessageArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.MessageArray)
}

void MessageArray::SharedCtor() {
  _cached_size_ = 0;
  msg_map_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  msg_map_.SetEntryDescriptor(
      &::proto3_proto::MessageArray_MsgMapEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageArray::~MessageArray() {
  // @@protoc_insertion_point(destructor:proto3_proto.MessageArray)
  SharedDtor();
}

void MessageArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageArray_descriptor_;
}

const MessageArray& MessageArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MessageArray* MessageArray::default_instance_ = NULL;

MessageArray* MessageArray::New(::google::protobuf::Arena* arena) const {
  MessageArray* n = new MessageArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageArray::Clear() {
  msg_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.MessageArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .proto3_proto.Message> msg_map = 1;
      case 1: {
        if (tag == 10) {
         parse_msg_map:
          ::google::protobuf::scoped_ptr<MessageArray_MsgMapEntry> entry(msg_map_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_msg_map())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.MessageArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.MessageArray)
  return false;
#undef DO_
}

void MessageArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.MessageArray)
  // map<string, .proto3_proto.Message> msg_map = 1;
  {
    ::google::protobuf::scoped_ptr<MessageArray_MsgMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::proto3_proto::Message >::const_iterator
        it = msg_map().begin(); it != msg_map().end(); ++it) {
      entry.reset(msg_map_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto3_proto.MessageArray)
}

::google::protobuf::uint8* MessageArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.MessageArray)
  // map<string, .proto3_proto.Message> msg_map = 1;
  {
    ::google::protobuf::scoped_ptr<MessageArray_MsgMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::proto3_proto::Message >::const_iterator
        it = msg_map().begin(); it != msg_map().end(); ++it) {
      entry.reset(msg_map_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.MessageArray)
  return target;
}

int MessageArray::ByteSize() const {
  int total_size = 0;

  // map<string, .proto3_proto.Message> msg_map = 1;
  total_size += 1 * this->msg_map_size();
  {
    ::google::protobuf::scoped_ptr<MessageArray_MsgMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::proto3_proto::Message >::const_iterator
        it = msg_map().begin(); it != msg_map().end(); ++it) {
      entry.reset(msg_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageArray::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageArray::MergeFrom(const MessageArray& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msg_map_.MergeFrom(from.msg_map_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageArray::CopyFrom(const MessageArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageArray::IsInitialized() const {

  return true;
}

void MessageArray::Swap(MessageArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageArray::InternalSwap(MessageArray* other) {
  msg_map_.Swap(&other->msg_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageArray_descriptor_;
  metadata.reflection = MessageArray_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3_proto

// @@protoc_insertion_point(global_scope)
